@using Aromata.Application.Books.GetBooks
@inject HttpClient Httpclient
@inject ISnackbar Snackbar
@inject ILogger<BookInfo> Logger
@if (_bookDto is not null)
{
    <MudCard Elevation="0">
        <MudCardHeader Class="d-flex flex-column align-items-start">
            <MudText><strong>Title:</strong> @_bookDto.Title</MudText>
            <MudText><strong>Author:</strong> @(_bookDto.Author ?? "-")</MudText>
        </MudCardHeader>
    </MudCard>
}

@if (_showNotFound)
{
    <MudText>Book not found!</MudText>
}
@if (_showError)
{
    <MudButton OnClick="@LoadBook">Retry</MudButton>
}

@if (_loading)
{
    <MudCard>
        <MudCardHeader>
            <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Text" Width="100%" Height="20px"></MudSkeleton>
            <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Text" Width="100%" Height="20px"></MudSkeleton>
        </MudCardHeader>
    </MudCard>
}



@code {
    [Parameter] public Guid BookId { get; set; }

    private BookDto? _bookDto;

    private bool _showNotFound;
    private bool _showError;

    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        await LoadBook();
    }

    private async Task LoadBook()
    {
        try
        {
            _loading = true;
            _bookDto = null;
            _showNotFound = false;
            _showError = false;
            StateHasChanged();
            _bookDto = await Httpclient.GetFromJsonAsync<BookDto>($"/api/books/{BookId}");
            if (_bookDto is null)
            {
                _showNotFound = true;
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error retrieving book with Id {BookId}", BookId);
            _showError = true;
        }
        finally
        {
            _loading = false;
        }
    }

}